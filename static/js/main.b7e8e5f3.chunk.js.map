{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","constants.js","Containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","connect","searchField","dispatch","onSearchChange","event","text","target","value","payload","useState","setRobots","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"wPAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,gCACC,6BAAKF,IACL,4BAAIC,WCcOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,8BAEUA,EAAOC,KAAI,SAACC,EAAMC,GAC1B,OACC,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKKC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,qBAAKT,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCECI,G,MARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACEJ,EAAMK,a,uCCiBKC,E,kDApBd,WAAYN,GAAQ,IAAD,8BAClB,gBACKO,MAAQ,CACZC,UAAU,GAHO,E,qDAOnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,4DAEDG,KAAKX,MAAMK,a,GAhBOQ,aCFdC,EAAsB,sBCoEpBC,mBA1DS,SAAAR,GACvB,MAAO,CACNS,YAAaT,EAAMS,gBAIM,SAACC,GAC3B,MAAO,CACNC,eAAgB,SAACC,GAAD,OAAWF,GChBEG,EDgBsBD,EAAME,OAAOC,MChBzB,CACxC1B,KAAMkB,EACNS,QAASH,KAFoB,IAACA,MDkEhBL,EA9Cf,SAAaf,GAQZ,MAA4BwB,mBAAS,IAArC,mBAAOlC,EAAP,KAAemC,EAAf,KAQAC,qBAAU,WACTC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAUM,QACvB,IAMH,IAAQf,EAAgChB,EAAhCgB,YAAaE,EAAmBlB,EAAnBkB,eAEfc,EAAiB1C,EAAO2C,QAAO,SAAAC,GACpC,OAAOA,EAAMnD,KAAKoD,cAAcC,SAASpB,EAAYmB,kBAEtD,OAAQ7C,EAAO+C,OAGb,sBAAKnD,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcuB,IACzB,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAU5B,OAAQ0C,WAPtB,oBAAI9C,UAAU,KAAd,wBE1CaoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLRO,EAAe,CACpB9B,YAAa,ICQR+B,G,MAASC,0BACTC,EAAQC,aDNc,WAAoC,IAAnC3C,EAAkC,uDAA5BuC,EAAcK,EAAc,uDAAP,GACvD,OAAOA,EAAOvD,MACb,KAAKkB,EACJ,OAAOsC,OAAOC,OAAO,GAAI9C,EAAO,CAACS,YAAamC,EAAO5B,UACtD,QACC,OAAOhB,KCC8B+C,YAAgBP,IAExDQ,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEDQ,SAASC,eAAe,SAM3BpB,M","file":"static/js/main.b7e8e5f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n        {\r\n           \trobots.map((user, i) =>{\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\t\t\t\r\n      \t}\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t); \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> Ooooops. That is not good</h1>\r\n\t\t} \r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nimport { setSearchField } from '../actions.js'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchField\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n\t}\r\n}\r\n\r\nfunction App(props) {\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\tsearchfield: ''\r\n\t// \t}\r\n\t// }\r\n\tconst [robots, setRobots] = useState([]);\r\n\t// const [searchfield, setSearchfield] = useState('');\r\n\r\n\t// componentDidMount() {\r\n\t// \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t// \t.then(response => response.json())\r\n\t// \t.then(users => this.setState({ robots: users }));\r\n\t// }\r\n\tuseEffect(() => {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => setRobots(users));\r\n\t}, [])\r\n// onSearchChange es un evento que cambia el valor del state y lo actualiza\r\n\t// const onSearchChange = (event) => {\r\n\t// \tsetSearchfield(event.target.value)\r\n\t// }\r\n\t\r\n\tconst { searchField, onSearchChange } = props;\r\n\r\n\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t})\r\n\treturn !robots.length ?\r\n\t\t<h1 className='tc'>Loading</h1> :\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { CHANGE_SEARCH_FIELD } from './constants.js';\r\n\r\nconst initialState = {\r\n\tsearchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots } from './reducers.js';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(searchRobots, applyMiddleware(logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}